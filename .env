import os
import logging
from datetime import datetime
import schedule
import threading

# ====== LINE 設定 ======
LINE_TOKEN = os.getenv('LINE_TOKEN')
LINE_SECRET = os.getenv('LINE_SECRET')

# 增加環境變數檢查
if not LINE_TOKEN or not LINE_SECRET:
    logger.error("LINE_TOKEN 或 LINE_SECRET 未設定！")
    raise ValueError("請在 .env 檔案中設定 LINE_TOKEN 和 LINE_SECRET")

LINE_TOKEN=你的_LINE_Channel_Access_Token
LINE_SECRET=你的_LINE_Channel_Secret

def push_line_message(text, to_id):
    try:
        # 加入參數檢查
        if not text or not to_id:
            logger.error("文字訊息或群組 ID 為空")
            return
            
        line_bot_api.push_message(
            to=to_id,
            messages=[TextMessage(text=text)]
        )
        logger.info(f"成功發送訊息到 {to_id}")
    except Exception as e:
        logger.error(f"發送訊息失敗: {str(e)}")

def send_today_message():
    logger.info("執行每日訊息發送")
    try:
        # 讀取儲存的群組 ID
        try:
            with open('group_id.txt', 'r') as f:
                group_id = f.read().strip()
                if not group_id:
                    logger.error("群組 ID 為空")
                    return
        except FileNotFoundError:
            logger.error("尚未設定群組 ID")
            return

        today = datetime.now().strftime('%Y/%m/%d')
        weekday = datetime.now().strftime('%A')
        if weekday in ['Saturday', 'Sunday']:
            logger.info("週末不發送訊息")
            return

        rows = sheet.get_all_records()
        message_sent = False
        for row in rows:
            if row['日期'] == today:
                message_parts = []
                for class_name, value in row.items():
                    if class_name != '日期' and value:  # 確保值不為空
                        message_parts.append(f"{class_name}: {value}")
                
                if message_parts:  # 確保有內容要發送
                    message = "\n".join(message_parts)
                    push_line_message(message, group_id)
                    message_sent = True
                    break
        
        if not message_sent:
            push_line_message(f"今天是 {today}，但找不到對應訊息", group_id)
            
    except Exception as e:
        logger.error(f"發送今日訊息時發生錯誤: {str(e)}")

if __name__ == "__main__":
    logger.info("程式啟動")
    
    # 檢查環境變數
    if not all([LINE_TOKEN, LINE_SECRET]):
        logger.error("缺少必要的環境變數設定")
        exit(1)
    
    # 檢查 Google Sheets 連線
    try:
        test_data = sheet.get_all_records()
        logger.info("Google Sheets 連線測試成功")
    except Exception as e:
        logger.error(f"Google Sheets 連線測試失敗: {str(e)}")
        exit(1)
    
    # 設定每天早上 8:00 發送訊息
    schedule.every().day.at("08:00").do(send_today_message)

    # 在背景執行排程
    schedule_thread = threading.Thread(target=run_schedule)
    schedule_thread.daemon = True
    schedule_thread.start()

    # 啟動 Flask 應用
    logger.info("啟動 Flask 應用")
    app.run(host='0.0.0.0', port=5000)